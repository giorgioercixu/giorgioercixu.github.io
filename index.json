[{"authors":null,"categories":null,"content":"Erci Xu is a research nomad who mostly focuses on distributed storage systems and software/hardware reliability. Besides research, he enjoys reading books and occasionally writes reviews where one can find it here Goodreads.\nErci Xu has a Chinese name, 徐尔茨 (sounds like hsu ertz). He also goes by the name of Giorgio, much easier to pronounce now, innit?\n","date":1633564800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1633564800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Erci Xu is a research nomad who mostly focuses on distributed storage systems and software/hardware reliability. Besides research, he enjoys reading books and occasionally writes reviews where one can find it here Goodreads.","tags":null,"title":"Giorgio (Erci) Xu","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature. Slides can be added in a few ways:\nCreate slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://giorgioercixu.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Teng Wang","Zhouyang Jia","Shanshan Li","Si Zheng","Yue Yu","Erci Xu","Shaoliang Peng","Xiangke Liao"],"categories":null,"content":"","date":1683417600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1683417600,"objectID":"188684eaebe2595309d62b27e393c914","permalink":"https://giorgioercixu.github.io/publication/icse23/","publishdate":"2021-05-07T00:00:00Z","relpermalink":"/publication/icse23/","section":"publication","summary":"Software systems introduce an increasing number of configuration options to provide flexibility, and support updating the options on the fly to provide persistent services. This mechanism, however, may affect the system reliability, leading to unexpected results like software crashes or functional errors. In this paper, we refer to the bugs caused by on-the-fly configuration updates as on-the-fly configuration bugs, or OCBugs for short.\n\nIn this paper, we conducted the first in-depth study on 75 real-world OCBugs from 5 widely used systems to understand the symptoms, root causes, and triggering conditions of OCBugs. Based on our study, we designed and implemented PARACHUTE, an automated testing framework to detect OCBugs. Our key insight is that the value of one configuration option, either loaded at the startup phase or updated on the fly, should have the same effects on the target program. PARACHUTE generates tests for on-the-fly configuration updates by mutating the existing tests and conducts differential analysis to identify OCBugs. We evaluated PARACHUTE on 7 real-world software systems. The results show that PARACHUTE detected 75% (42/56) of the known OCBugs, and reported 13 unknown bugs, 11 of which have been confirmed or fixed by developers until the time of writing.","tags":["software engineering","software dependability","bug detection"],"title":"Understanding and Detecting On-the-Fly Configuration Bugs (to appear)","type":"publication"},{"authors":["Ruiming Lu","Erci Xu (co-first)","Yiming Zhang","Fengyi Zhu","Zhaosheng Zhu","Mengtian Wang","Zongpeng Zhu","Guangtao Xue","Jiwu Shu","Minglu Li","Jiesheng Wu"],"categories":null,"content":"","date":1676851200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1676851200,"objectID":"3805514d19fe7812a6704726904b0a7c","permalink":"https://giorgioercixu.github.io/publication/fast23-1/","publishdate":"2020-07-20T00:00:00Z","relpermalink":"/publication/fast23-1/","section":"publication","summary":"The newly-emerging 'fail-slow' failures plague both software and hardware where the victim components are still functioning yet with degraded performance. To address this problem, this paper presents Perseus, a practical fail-slow detection framework for storage devices. Perseus leverages a light regression-based model to fast pinpoint and analyze fail-slow failures at the granularity of drives. Within a 10-month close monitoring on 248K drives, Perseus managed to find 304 fail-slow cases. Isolating them can reduce the (node-level) 99.99th tail latency by 48.05%. We assemble a large-scale fail-slow dataset (including 41K normal drives and 315 verified fail-slow drives) from our production traces, based on which we provide root cause analysis on fail-slow drives covering a variety of ill-implemented scheduling, hardware defects, and environmental factors. We commit to releasing the dataset to the public for fail-slow study.","tags":["SSD","NVM","storage"],"title":"Perseus: A Fail-Slow Detection Framework for Cloud Storage Systems (to appear)","type":"publication"},{"authors":["Su Zhou","Erci Xu (corresponding)","Hao Wu","Yu Du","Jiacheng Cui","Wanyu Fu","Chang Liu","Yingni Wang","Wenbo Wang","Shouqu Sun","Xianfei Wang","Bo Feng","Biyun Zhu","Xin Tong","Weikang Kong","Linyan Liu","Zhongjie Wu","Jinbo Wu","Qingchao Luo","Jiesheng Wu"],"categories":null,"content":"","date":1676851200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1676851200,"objectID":"773e7b6c26705bf52ebbed53738ef588","permalink":"https://giorgioercixu.github.io/publication/fast23-2/","publishdate":"2020-07-20T00:00:00Z","relpermalink":"/publication/fast23-2/","section":"publication","summary":"Cloud object storage vendors are in the forever pursuit of better cost efficiency. The emerging Shingled Magnetic Recording (SMR) drive becomes an economically favorable choice due to significantly improved areal density. However, SMR drives were mostly deployed in the archival-class object storage because they require zone-level sequential write and erase in bulk. For standard-class object storage, previous studies and our preliminary exploration reveal that existing SMR drive solutions can suffer from severe performance penalty and unpredictability.\n\nIn this paper, we propose SMRSTORE, an SMR-based storage engine for standard-class object storage without compromising performance or durability. The key features of SMRSTORE include directly bridging the semantics of distributed file system with the zoned namespace in SMR drives, using a complete log-structured design, and applying guided data placement to reduce GC activities and achieve consistent performance. The evaluation shows that SMRSTORE delivers comparable performance as Ext4 on the Conventional Magnetic Recording (CMR) drives, and can be up to 2.16x faster than F2FS on SMR drives. Currently, we have deployed SMRSTORE in Alibaba Cloud Object Storage Service (OSS) to store hundreds of PBs of data in standard class. We plan to use SMR drives for all classes of OSS in the near future.","tags":["storage","HDD","SMR"],"title":"SMRSTORE: A Storage Engine for Cloud Object Storage on HM-SMR Drives (to appear)","type":"publication"},{"authors":["Ruiming Lu","Erci Xu (co-first)","Yiming Zhang","Zhaosheng Zhu","Mengtian Wang","Zongpeng Zhu","Guangtao Xue","Minglu Li","Jiesheng Wu"],"categories":null,"content":"","date":1658275200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1658275200,"objectID":"87d9d368d83b634486e6958a7bceeb46","permalink":"https://giorgioercixu.github.io/publication/atc22/","publishdate":"2022-07-20T00:00:00Z","relpermalink":"/publication/atc22/","section":"publication","summary":"NVMe SSD has become a staple in modern datacenters thanks to its high throughput and ultra-low latency. Despite its popularity, the reliability of NVMe SSD under mass deployment remains unknown. In this paper, we collect logs from over one million NVMe SSDs deployed at Alibaba, and conduct extensive analysis. From the study, we identify a series of major reliability changes in NVMe SSD. On the good side, NVMe SSD becomes more resilient to early failures and variances of access patterns. On the bad side, NVMe SSD becomes more vulnerable to complicated correlated failures. More importantly, we discover that the ultra-low latency nature makes NVMe SSD much more likely to be impacted by fail-slow failures.","tags":["SSD","NVMe","storage"],"title":"NVMe SSD Failures in the Field: the Fail-Stop and the Fail-Slow","type":"publication"},{"authors":["Cai Deng","Qi Chen","Xiangyu Zou","Erci Xu","Bo Tang","Wen Xia"],"categories":null,"content":"","date":1642636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642636800,"objectID":"6e2cf34563ef46ad9360e50f4a4835ab","permalink":"https://giorgioercixu.github.io/publication/icde22/","publishdate":"2022-01-20T00:00:00Z","relpermalink":"/publication/icde22/","section":"publication","summary":"Images occupy a large amount of storage in data centers. To cope with the explosive growth of the image storage requirement, image compression techniques are devised to shrink the size of every single image at first. Furthermore, image deduplication methods are proposed to reduce the storage cost as they could be used to eliminate redundancy among images. However, state-of-the-art image deduplication methods either can only eliminate file-level coarse-grained redundancy or cannot guarantee lossless deduplication. In this work, we propose a new lossless image deduplication framework to eliminate fine-grained redundancy among images. It first decodes images to expose similarity, then eliminates fine-grained redundancy on the decoded data by delta compres-sion, and finally re-compresses the remaining data by image compression encoding. Based on this framework, we propose a novel lossless similarity-based deduplication (SBD) scheme for decoded image data (called imDedup). Specifically, imDedup uses a novel and fast sampling method (called Feature Map) to detect similar images in a two-dimensional way, which greatly reduces computation overhead. Meanwhile, it uses a novel delta encoder (called Idelta) which incorporates image compression encoding characteristics into deduplication to guarantee the remaining deduplicated image data to be friendly re-compressed via image encoding, which significantly improves the compression ratio. We implement a prototype of imDedup for JPEG images, and demonstrate its superiority on four datasets: Compared with exact image deduplication, imDedup achieves a 19%-38% higher compression ratio by efficiently eliminating fine-grained redundancy. Compared with the similarity detector and delta encoder of state-of-the-art SBD schemes running on the decoded image data, imDedup achieves a 1.8×-3.4× higher throughput and a 1.3 ×-1. 6 × higher compression ratio, respectively.","tags":["deduplication","storage"],"title":"imDedup: A Lossless Deduplication Scheme to Eliminate Fine-grained Redundancy among Images","type":"publication"},{"authors":["Giorgio (Erci) Xu"],"categories":["Review"],"content":" 《Skunk Works》是洛克希德马丁公司旗下臭鼬工厂第二任掌门Ben Rich的回忆录，其中谈及了U-2（蛟龙夫人）、SR-71（黑鸟）以及F-117A（夜鹰）等职业生涯得意之作，也回忆了许多冷战时期两个阵营较量的历史，例如前苏联将越境侦查的U-2击落并活捉飞行员Francis Powers的冷战著名事件（相关故事在前几年的电影《间谍之桥》中亦有描述）。总的来看，这是一部相当不错的回忆录，不仅在于这些飞机与事件一直以来为人所津津乐道，也是因为作者出色的笔触展现了冷战这个特殊背景下华盛顿众官员、军工企业负责人乃至平头百姓的浮世绘。\nSkunk Works的中国综合症 中国作为冷战阵营中的一个特殊角色，特别是在中苏十年论战时期和中美建交前夕，对世界格局产生了深远的影响，也间接影响到了Skunk Works的研发与武器部署。例如，在Powers坠机事件后，时任美总统的艾森豪威尔迫于国际舆论压力以及避免更多的U-2被击落，因此放弃了部署U-2越境侦察苏联及东欧国家。但CIA旋即找到台匪部队，成立了所谓黑猫中队开始了对中国，特别是罗布泊地区的常态化侦察。前后历经多年，共出动二百余架次侦照任务。谁料中国人向来聪明，前辈们靠着改进型的SA-2地对空导弹，“捅竹竿”式的把U-2捅下来四五架，让中国成为现今U-2“保有量”第二多的国家。因此，Ben Rich在回顾这段历史中，无不感慨地把标题取成了China Syndrome (即中国综合症）。\n技术所带来的傲慢 Skunk Works无疑是美军工领域皇冠上的明珠，其看家本领就是做高性能的侦察机。在谍照卫星尚不发达的年代，派遣高速飞机抵近或飞跃他国领土进行侦察似乎成了美帝的应有之义。如果说越战期间，北越作为正式宣战的敌对国家，侦察也好，轰炸也好，还似乎有法可依。那么，五六十年代对中苏的越境飞行，就可以说是罔顾国际法律与准则，仗着科技实力为所欲为。\n值得注意的是，这种心态不仅在决策者身上有，在执行者层面上亦非常突出。例如，若干飞行员都提到一个情况。在初期执行任务时，他们发现被侦测的国家往往急于掩盖地上目标等军事秘密，到了后期被侦查的国家似是无所谓般不对侦察行为采取主动或被动的隐藏手段。这些飞行员无不“诚恳”地表示本该如此，让我们看完了，了解完了，知道贵国没有迫在眉睫的战争威胁就行了。更为荒唐的是，这种傲慢居然也在对待邻国身上。在一次SR-71的任务中，因燃料不足，美飞行员直接不打招呼横穿法国本土领空。甚至于在法国派出幻影3拦截并询问黑鸟驾驶员通行识别码时，美飞行员直接冲着对方比了个中指，凭借性能优势，一加油门，直接逃逸。\n如何当好接班人 Ben Rich是Skunk Works的第二任掌门，而第一任就是赫赫有名的Kelly Johnson。在Kelly退休前期，他保举了Ben作为接班人。书里说的虽然比较委婉，但在我看来，这个班委实不好接。一是，Kelly作为创始人，缔造过P-38、F-104、U-2以及SR-71等经典作品，在工厂群众中享有崇高的威望。二是，Kelly的行事风格，依书描述，可谓事无巨细，事必躬亲，因此很多研发人员以“找Kelly把把关”为工作守则。三是，Kelly退而不休，经常回老单位串门，帮助工作。这样一来，工厂群众一有问题，就等Kelly这个太上皇回来，而往往把Ben晾在一边。\nBen作为新掌门显然对老同志们频繁找Kelly反映问题心怀不满。然而，明面上肯定不好发作。一则，不能把矛头指向老同志。一方面，这会加剧干群矛盾耽误工作。另一方面，这些老同志作为技术骨干是工厂的核心，简单地开除了事，显然更是拆自己台。二来，Ben也不好讲Kelly的闲话，毕竟自己的执政合法性在于Kelly的保举，贸然地采取一些举措（例如禁止员工向Kelly汇报等）无异于自寻短见。\n最终Ben采取的，在我看来，是一种阳谋、阴谋结合的方式。在台面上，和Kelly挑明了这种时候应当“人走茶凉”，给继任者以施展拳脚的空间。在台面下，随着军方官僚主义的抬头，文山会海和繁琐的规定蜂拥而至，Ben藉着保密规定这一点，借坡下驴逐步地将Kelly排除在后续项目之外。同时，利用Have Blue (F-117A的原型机)项目积极扶持少壮派，增加自己说话的份量。两相结合，虽然用了四五年，但也算是平稳交班。当然我们应该看到，Skunk Works后续的成功，仍应归功于Ben自身出色的洞察力与远见（由他讨论B-2的失败与预见下一代战略轰炸机的发展事实可见一斑）。一味醉心于玩弄权术，是没有可能带好这种级别的队伍的。\n从做飞机到做计算机 在读到书中关于若干飞机的设计讨论时，我时常会联想到自己在计算机系统领域科研工作，有很多思路颇为值得借鉴。例如，我非常同意Skunk Works在原型设计对一个性能指标摈除杂念的单纯追求。例如，SR-71的设计是为了打造一款3万米（实际约为2万5左右）、3马赫巡航的侦察飞机。因此，设计紧紧围绕这个目标，剩余的部分（包括机动性、构型等）都可以商榷。我在系统研究中，也往往面临大量这样抉择，反思过往的工作，仍然没有做到极致的偏执，很多时候会为了所谓的Practicality牺牲自己的特色，把长板去补了所谓的水桶。\n写在最后 我并非军迷，对冷战历史可以说知之甚少。若有不符事实与史实之处，敬请批评指正。\n","date":1633564800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633564800,"objectID":"7b0ea7684560bb0809d8d8c93e28c6ab","permalink":"https://giorgioercixu.github.io/post/skunk-work/","publishdate":"2021-10-07T00:00:00Z","relpermalink":"/post/skunk-work/","section":"post","summary":"A book review for Ben. Rich's memoir of his years at Skunk Works.","tags":["Chinese","Review"],"title":"Skunk Works Review (Chinese)","type":"post"},{"authors":["Xiaojian Liao","Youyou Lu","Erci Xu","Jiwu Shu"],"categories":null,"content":"","date":1626220800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626220800,"objectID":"5065bc8cffae94967d87604aa38c65a3","permalink":"https://giorgioercixu.github.io/publication/atc21/","publishdate":"2021-07-14T00:00:00Z","relpermalink":"/publication/atc21/","section":"publication","summary":"The bandwidth of flash storage has been surging in recent years. Employing multicores to fully unleash its abundant bandwidth becomes a necessary step towards building high performance storage systems. This paper presents the design and implementation of Max, a multicore-friendly log-structured file system (LFS) for flash storage. With three main techniques, Max systematically improves the scalability of LFS while retaining the flash-friendly design. First, we propose a new reader-writer semaphore to scale the user I/Os with negligible impact on the internal operations of LFS. Second, we introduce file cell to scale the access to in-memory index and cache while delivering concurrency- and flash-friendly on-disk layout. Third, to fully exploit the flash parallelism, we advance the single log design with runtime-independent log partitions, and delay the ordering and consistency guarantees to crash recovery. We implement Max based on the F2FS in the Linux kernel. Evaluations show that Max significantly improves scalability, and achieves an order of magnitude higher throughput than existing Linux file systems.","tags":["SSD","NVM","storage"],"title":"Max: A Multicore-Accelerated File System for Flash Storage","type":"publication"},{"authors":["Wang Li","Zhouyang Jia","Shanshan Li","Yuanliang Zhang","Teng Wang","Erci Xu","Ji Wang","Xiangke Liao"],"categories":null,"content":"","date":1625961600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625961600,"objectID":"21bdee6e77f43081bc278a2ad79fb131","permalink":"https://giorgioercixu.github.io/publication/issta21/","publishdate":"2021-07-11T00:00:00Z","relpermalink":"/publication/issta21/","section":"publication","summary":"Configuration error injection testing (CEIT) could systematically evaluate software reliability and diagnosability to runtime configuration errors. This paper explores the challenges and opportunities of applying CEIT technique. We build an extensible, highly-modularized CEIT framework named CeitInspector to experiment with various CEIT techniques. Using CeitInspector, we quantitatively measure the effectiveness and efficiency of CEIT using six mature and widely-used server applications. During this process, we find a fair number of test cases are left unstudied by the prior research work. The injected configuration errors in these cases often indicate latent misconfigurations, which might be ticking time bombs in the system and lead to severe damage. We conduct an in-depth study regarding these cases to reveal the root causes, and explore possible remedies. Finally, we come up with actionable suggestions guided by our study to improve the effectiveness and efficiency of the existing CEIT techniques.","tags":["software engineering","configuration","fuzzing","bug detection"],"title":"Challenges and opportunities: an in-depth empirical study on configuration error injection testing","type":"publication"},{"authors":["Zhouyang Jia","Shanshan Li","Tingting Yu","Zeng Chen","Erci Xu","Xiaodong Liu","Ji Wang","Xiangke Liao"],"categories":null,"content":"","date":1620345600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1620345600,"objectID":"4fba9aa385a3d3294a5a315678302ffc","permalink":"https://giorgioercixu.github.io/publication/icse21/","publishdate":"2021-05-07T00:00:00Z","relpermalink":"/publication/icse21/","section":"publication","summary":"Applications depend on libraries to avoid reinventing the wheel. Libraries may have incompatible changes during evolving. As a result, applications will suffer from compatibility failures. There has been much research on addressing detecting incompatible changes in libraries, or helping applications co-evolve with the libraries. The existing solution helps the latest application version work well against the latest library version as an afterthought. However, end users have already been suffering from the failures and have to wait for new versions. In this paper, we propose DepOwl, a practical tool helping users prevent compatibility failures. The key idea is to avoid using incompatible versions from the very beginning. We evaluated DepOwl on 38 known compatibility failures from StackOverflow, and DepOwl can prevent 35 of them. We also evaluated DepOwl using the software repository shipped with Ubuntu-19.10. DepOwl detected 77 unknown dependency bugs, which may lead to compatibility failures.","tags":["software engineering","software dependability","bug detection"],"title":"DepOwl: Detecting Dependency Bugs to Prevent Compatibility Failures","type":"publication"},{"authors":["Qing Wang","Youyou Lu","Erci Xu","Junru Li","Youmin Chen","Jiwu Shu"],"categories":null,"content":"","date":1613779200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613779200,"objectID":"46123eb0045e30f78f03cc19fffee0ca","permalink":"https://giorgioercixu.github.io/publication/fast21/","publishdate":"2020-07-20T00:00:00Z","relpermalink":"/publication/fast21/","section":"publication","summary":"Distributed shared memory (DSM) is experiencing a resurgence with emerging fast network stacks. Caching, which is still needed for reducing frequent remote access and balancing load, can incur high coherence overhead. In this paper, we propose CONCORDIA, a DSM with fast in-network cache coherence backed by programmable switches. At the core of CONCORDIA is FLOWCC, a hybrid cache coherence protocol, enabled by a collaborative effort from switches and servers. Moreover, to overcome limitations of programmable switches, we also introduce two techniques: (i) an ownership migration mechanism to address the problem of limited memory capacity on switches and (ii) idempotent operations to handle packet loss in the case that switches are stateful. To demonstrate CONCORDIA’s practical benefits, we build a distributed key-value store and a distributed graph engine on it, and port a distributed transaction processing system to it. Evaluation shows that CONCORDIA obtains up to 4.2x, 2.3x and 2x speedup over state-of-the-art DSMs on key-value store, graph engine and transaction processing workloads, respectively.","tags":["SSD","NVM","storage"],"title":"Concordia: Distributed shared memory with in-network cache coherence","type":"publication"},{"authors":["Xiaojian Liao","Youyou Lu","Erci Xu","Jiwu Shu"],"categories":null,"content":"","date":1604448000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604448000,"objectID":"4667542e09b118d4a2e489da02289d3d","permalink":"https://giorgioercixu.github.io/publication/osdi20/","publishdate":"2020-11-04T00:00:00Z","relpermalink":"/publication/osdi20/","section":"publication","summary":"Storage systems rely on write dependency to achieve atomicity and consistency. However, enforcing write dependency comes at the expense of performance; it concatenates multiple hardware queues into a single logical queue, disables the concurrency of flash storage and serializes the access to isolated devices. Such serialization prevents the storage system from taking full advantage of high-performance drives (e.g., NVMe SSD) and storage arrays.\nIn this paper, we propose a new IO stack called Horae to alleviate the write dependency overhead for high-performance drives. Horae separates the dependency control from the data flow, and uses a dedicated interface to maintain the write dependency. Further, Horae introduces the joint flush to enable parallel FLUSH commands on individual devices, and write redirection to handle dependency loops and parallelize in-place updates. We implement Horae in Linux kernel and demonstrate its effectiveness through a wide variety of workloads. Evaluations show Horae brings up to 1.8× and 2.1× performance gain in MySQL and BlueStore, respectively.","tags":["SSD","storage","consistency"],"title":"Write Dependency Disentanglement with HORAE","type":"publication"},{"authors":["Haochen He","Zhouyang Jia","Shanshan Li","Erci Xu","Tingting Yu","Yue Yu","Ji Wang","Xiangke Liao"],"categories":null,"content":"","date":1600646400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600646400,"objectID":"91292c41d3667d8eb97ec1bf02f78fc4","permalink":"https://giorgioercixu.github.io/publication/ase20/","publishdate":"2020-09-21T00:00:00Z","relpermalink":"/publication/ase20/","section":"publication","summary":"Performance bugs are often hard to detect due to their non fail-stop symptoms. Existing debugging techniques can only detect performance bugs with known patterns (e.g., inefficient loops). The key reason behind this incapability is the lack of a general test oracle. Here, we argue that the performance (e.g., throughput, latency, execution time) expectation of configuration can serve as a strong oracle candidate for performance bug detection. First, prior work shows that most performance bugs are related to configurations. Second, the configuration change reflects common expectation on performance changes. If the actual performance is contrary to the expectation, the related code snippet is likely to be problematic. In this paper, we first conducted a comprehensive study on 173 real-world configuration-related performance bugs (CPBugs) from 12 representative software systems. We then derived seven configuration-related performance properties, which can serve as the test oracle in performance testing. Guided by the study, we designed and evaluated an automated performance testing framework, CP-DETECTOR, for detecting real-world configuration-related performance bugs. CP-DETECTOR was evaluated on 12 open-source projects. The results showed that it detected 43 out of 61 existing bugs and reported 13 new bugs.","tags":["software engineering","performance bug","bug detection"],"title":"CP-Detector: Using Configuration-related Performance Properties to Expose Performance Bugs","type":"publication"},{"authors":["Zhe Yang","Youyou Lu","Erci Xu","Jiwu Shu"],"categories":null,"content":"","date":1595203200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595203200,"objectID":"1244d289bd01b527b63529254e5f8d1d","permalink":"https://giorgioercixu.github.io/publication/dac20/","publishdate":"2020-07-20T00:00:00Z","relpermalink":"/publication/dac20/","section":"publication","summary":"Block I/O serves as a classic interface for accessing storage devices with portability. But it can also cause extra overhead by enforcing transferring data in the unit of blocks. In this paper, we present CoinPurse, a device-assisted file system with dual interfaces. By leveraging non-volatile memory (NVM) in SSD, CoinPurse manages to adaptively persist writes through both the block I/O and a byte-addressable partial update interface. In addition, we also develop a set of techniques to overcome hardware limitations and resolve possible consistency conflicts. Evaluation shows that CoinPurse outperforms F2FS, a popular flash-optimized file system, by up to 33.2%.","tags":["SSD","storage"],"title":"CoinPurse: A Device-Assisted File System with Dual Interfaces","type":"publication"},{"authors":["Erci Xu","Mai Zheng","Feng Qin","Yikang Xu","Jiesheng Wu"],"categories":null,"content":"","date":1561939200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561939200,"objectID":"da64ee320d4560556ae0e7197e1e8ea8","permalink":"https://giorgioercixu.github.io/publication/atc19/","publishdate":"2019-07-01T00:00:00Z","relpermalink":"/publication/atc19/","section":"publication","summary":"Modern datacenters increasingly use flash-based solid state drives (SSDs) for high performance and low energy cost. However, SSD introduces more complex failure modes compared to traditional hard disk. While great efforts have been made to understand the reliability of SSD itself, it remains unclear what types of system level failures are related to SSD, what are the root causes, and how the rest of the system interacts with SSD and contributes to failures. Answering these questions can help practitioners build and maintain highly reliable SSD-based storage systems.\n\nIn this paper, we study the reliability of SSD-based storage systems deployed in Alibaba Cloud, which cover near half a million SSDs and span over three years of usage under representative cloud services. We take a holistic view to analyze both device errors and system failures to better understand the potential casual relations. Particularly, we focus on failures that are Reported As \"SSD-Related\" (RASR) by system status monitoring daemons. Through log analysis, field studies, and validation experiments, we identify the characteristics of RASR failures in terms of their distribution, symptoms, and correlations. Moreover, we derive a number of major lessons and a set of effective methods to address the issues observed. We believe that our study and experience would be beneficial to the community and could facilitate building highly-reliable SSD-based storage systems.","tags":["SSD","storage","fault tolerance"],"title":"Lessons and Actions: What We Learned from 10K SSD-Related Storage System Failures","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot;\rif porridge == \u0026quot;blueberry\u0026quot;:\rprint(\u0026quot;Eating...\u0026quot;)\rMath In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}}\r{{% fragment %}} **Two** {{% /fragment %}}\r{{% fragment %}} Three {{% /fragment %}}\rPress Space to play!\nOne **Two** Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}}\r- Only the speaker can read these notes\r- Press `S` key to view\r{{% /speaker_note %}}\rPress the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}}\r{{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}}\r{{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}\rCustom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1,\r.reveal section h2,\r.reveal section h3 {\rcolor: navy;\r}\rQuestions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://giorgioercixu.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Erci Xu","Mai Zheng","Feng Qin","Jiesheng Wu","Yikang Xu"],"categories":null,"content":"","date":1542499200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1542499200,"objectID":"ce1cedc47c18c923ef1f0ef0e364570e","permalink":"https://giorgioercixu.github.io/publication/sc18/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/sc18/","section":"publication","summary":"Modern datacenters increasingly use flash-based solid state drives (SSDs) for high performance and low energy cost. However, SSDs introduce more complex failure modes compared to traditional hard disks. While great efforts have been made to understand the reliability of SSDs itself, it remains unclear how the device-level errors may affect upper layers, or how the services running on top of the storage stack may affect the SSDs.\n\nIn this paper, we take a holistic view to examine the reliability of SSD-based storage systems in Alibabas datacenters, which covers about half-million SSDs under representative cloud services over three years. By vertically analyzing the error events across three layers (i.e., SSDs, OS, and the distributed file system), we discover a number of interesting correlations. For example, SSDs with UltraDMA CRC errors, while seems benign at the device level, are nearly 3 times more likely to lead to OS-level error events. As another example, different cloud services may lead to different usage patterns of SSDs, some of which are detrimental from the devices perspective.","tags":["SSD","storage","fault tolerance"],"title":"Understanding SSD Reliability in Large-Scale Cloud Systems","type":"publication"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://giorgioercixu.github.io/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://giorgioercixu.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]